# -*- coding: utf-8 -*-
"""Entregable_2_Coderhouse_Guillermo_Hernandez.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AV1tETQxtXe9aEy1WdTh3HnsCsQ3UF8u
"""

# Installing packages
# !pip install requests
# !pip install psycopg2
# !pip install pandas
# !pip install uuid

# Connecting to Redshift
# import psycopg2

# host="data-engineer-cluster.cyhh5bfevlmn.us-east-1.redshift.amazonaws.com"
# dbname="data-engineer-database"
# user="hernandez17_guillermo_coderhouse"
# port="5439"

# with open("./config.txt",'r') as f:
#     password=str(f.read()).strip()

# try:
#     connection = psycopg2.connect(
#         host=host,
#         dbname=dbname,
#         user=user,
#         password=password,
#         port=port
#     )
#     print("Connection successfully!")

# except Exception as e:
#     print("Error connecting")
#     print(e)

# # Creation 'infoweather' table, this contains general information about weather for last 7 days
# with connection.cursor() as cursor:
#     cursor.execute("""
#         CREATE TABLE IF NOT EXISTS hernandez17_guillermo_coderhouse.infoweather
#         (
#           time VARCHAR(19) primary key,
#           latitude DECIMAL not null,
#           longitude DECIMAL not null,
#           generationtime_ms DECIMAL(30, 20) not null,
#           utc_offset_seconds DECIMAL not null,
#           timezone VARCHAR(50) not null,
#           timezone_abbreviation VARCHAR(5) not null,
#           elevation DECIMAL not null,
#           unit_time VARCHAR(20) not null,
#           unit_temperature_2m VARCHAR(10) not null,
#           unit_relative_humidity_2m VARCHAR(10) not null,
#           unit_wind_speed_10m VARCHAR(10) not null,
#           temperature_2m DECIMAL not null,
#           relative_humidity_2m DECIMAL not null,
#           wind_speed_10m DECIMAL not null,
#           creation_date TIMESTAMP not null
#         );
#     """)
#     connection.commit()

# # Function for convert key of api to dataframe
# def convert_to_dataframe_key(key):
#   return key.replace('_', ' ').title().replace(' ', '_')

# # Weather api mock
# # response_weather_api_mock = {"latitude":52.52,"longitude":13.419998,"generationtime_ms":0.12505054473876953,"utc_offset_seconds":0,"timezone":"GMT","timezone_abbreviation":"GMT","elevation":38.0,"hourly_units":{"time":"iso8601","temperature_2m":"°C","relative_humidity_2m":"%","wind_speed_10m":"km/h"},"hourly":{"time":["2024-05-02T00:00","2024-05-02T01:00","2024-05-02T02:00","2024-05-02T03:00","2024-05-02T04:00","2024-05-02T05:00","2024-05-02T06:00","2024-05-02T07:00","2024-05-02T08:00","2024-05-02T09:00","2024-05-02T10:00","2024-05-02T11:00","2024-05-02T12:00","2024-05-02T13:00","2024-05-02T14:00","2024-05-02T15:00","2024-05-02T16:00","2024-05-02T17:00","2024-05-02T18:00","2024-05-02T19:00","2024-05-02T20:00","2024-05-02T21:00","2024-05-02T22:00","2024-05-02T23:00","2024-05-03T00:00","2024-05-03T01:00","2024-05-03T02:00","2024-05-03T03:00","2024-05-03T04:00","2024-05-03T05:00","2024-05-03T06:00","2024-05-03T07:00","2024-05-03T08:00","2024-05-03T09:00","2024-05-03T10:00","2024-05-03T11:00","2024-05-03T12:00","2024-05-03T13:00","2024-05-03T14:00","2024-05-03T15:00","2024-05-03T16:00","2024-05-03T17:00","2024-05-03T18:00","2024-05-03T19:00","2024-05-03T20:00","2024-05-03T21:00","2024-05-03T22:00","2024-05-03T23:00","2024-05-04T00:00","2024-05-04T01:00","2024-05-04T02:00","2024-05-04T03:00","2024-05-04T04:00","2024-05-04T05:00","2024-05-04T06:00","2024-05-04T07:00","2024-05-04T08:00","2024-05-04T09:00","2024-05-04T10:00","2024-05-04T11:00","2024-05-04T12:00","2024-05-04T13:00","2024-05-04T14:00","2024-05-04T15:00","2024-05-04T16:00","2024-05-04T17:00","2024-05-04T18:00","2024-05-04T19:00","2024-05-04T20:00","2024-05-04T21:00","2024-05-04T22:00","2024-05-04T23:00","2024-05-05T00:00","2024-05-05T01:00","2024-05-05T02:00","2024-05-05T03:00","2024-05-05T04:00","2024-05-05T05:00","2024-05-05T06:00","2024-05-05T07:00","2024-05-05T08:00","2024-05-05T09:00","2024-05-05T10:00","2024-05-05T11:00","2024-05-05T12:00","2024-05-05T13:00","2024-05-05T14:00","2024-05-05T15:00","2024-05-05T16:00","2024-05-05T17:00","2024-05-05T18:00","2024-05-05T19:00","2024-05-05T20:00","2024-05-05T21:00","2024-05-05T22:00","2024-05-05T23:00","2024-05-06T00:00","2024-05-06T01:00","2024-05-06T02:00","2024-05-06T03:00","2024-05-06T04:00","2024-05-06T05:00","2024-05-06T06:00","2024-05-06T07:00","2024-05-06T08:00","2024-05-06T09:00","2024-05-06T10:00","2024-05-06T11:00","2024-05-06T12:00","2024-05-06T13:00","2024-05-06T14:00","2024-05-06T15:00","2024-05-06T16:00","2024-05-06T17:00","2024-05-06T18:00","2024-05-06T19:00","2024-05-06T20:00","2024-05-06T21:00","2024-05-06T22:00","2024-05-06T23:00","2024-05-07T00:00","2024-05-07T01:00","2024-05-07T02:00","2024-05-07T03:00","2024-05-07T04:00","2024-05-07T05:00","2024-05-07T06:00","2024-05-07T07:00","2024-05-07T08:00","2024-05-07T09:00","2024-05-07T10:00","2024-05-07T11:00","2024-05-07T12:00","2024-05-07T13:00","2024-05-07T14:00","2024-05-07T15:00","2024-05-07T16:00","2024-05-07T17:00","2024-05-07T18:00","2024-05-07T19:00","2024-05-07T20:00","2024-05-07T21:00","2024-05-07T22:00","2024-05-07T23:00","2024-05-08T00:00","2024-05-08T01:00","2024-05-08T02:00","2024-05-08T03:00","2024-05-08T04:00","2024-05-08T05:00","2024-05-08T06:00","2024-05-08T07:00","2024-05-08T08:00","2024-05-08T09:00","2024-05-08T10:00","2024-05-08T11:00","2024-05-08T12:00","2024-05-08T13:00","2024-05-08T14:00","2024-05-08T15:00","2024-05-08T16:00","2024-05-08T17:00","2024-05-08T18:00","2024-05-08T19:00","2024-05-08T20:00","2024-05-08T21:00","2024-05-08T22:00","2024-05-08T23:00"],"temperature_2m":[16.9,16.3,15.8,15.3,14.9,15.2,16.7,18.6,20.7,22.5,23.9,25.0,25.6,26.0,25.6,25.4,25.4,24.9,23.7,22.1,20.3,19.2,18.3,17.4,16.7,16.3,15.6,15.1,14.8,15.1,16.4,18.1,19.1,20.4,21.3,22.1,22.4,22.8,22.9,22.6,22.1,21.2,19.9,18.0,16.7,15.8,15.9,15.1,14.4,13.6,13.1,12.7,12.3,12.4,13.2,14.6,16.1,17.8,19.2,20.4,21.3,22.0,22.4,22.5,22.4,22.1,21.6,20.6,19.1,17.9,16.5,15.0,14.9,14.4,14.1,13.9,13.9,14.1,14.6,15.6,16.9,18.1,19.2,20.2,20.9,21.1,21.0,20.8,20.5,20.0,19.5,18.8,18.0,17.1,16.1,15.0,14.1,13.5,13.0,12.7,12.6,12.8,13.3,14.7,16.4,17.6,17.7,17.3,16.8,16.7,16.5,16.4,16.1,15.7,15.5,19.1,18.1,17.2,16.5,15.9,15.4,14.7,14.0,13.7,13.7,14.1,14.8,16.0,17.5,18.9,20.1,21.2,21.8,21.7,21.0,20.3,19.6,18.7,17.8,16.7,15.6,14.6,13.9,13.4,12.9,12.4,11.9,11.8,12.1,12.7,13.6,14.7,16.0,17.3,18.5,19.6,20.2,19.8,18.8,18.1,17.8,17.8,17.5,17.0,16.3,15.6,15.1,14.7],"relative_humidity_2m":[57,58,60,61,63,61,56,51,45,40,36,33,32,31,33,34,34,35,40,45,52,56,59,63,68,69,72,74,77,75,71,66,63,58,54,49,48,46,45,46,48,53,62,70,72,73,71,68,68,69,72,74,76,75,70,64,58,52,48,45,43,42,42,43,43,43,46,50,59,67,74,88,87,90,90,90,90,89,86,79,69,61,55,51,48,46,45,45,45,47,49,52,57,62,70,79,86,90,92,92,91,88,83,74,62,55,56,60,64,65,66,66,67,67,68,44,49,53,55,57,59,62,65,67,67,66,64,60,56,51,46,42,40,42,46,51,56,62,68,73,77,81,84,87,89,91,93,93,92,89,86,81,76,70,63,56,54,60,70,77,77,73,72,76,82,87,90,91],"wind_speed_10m":[11.1,10.9,12.1,12.7,12.7,12.3,13.9,14.3,15.1,16.3,16.5,18.8,19.7,20.3,20.6,17.7,18.5,16.1,12.4,12.1,9.6,10.2,11.0,9.9,9.5,10.2,10.8,10.7,9.1,10.7,9.8,12.5,12.1,12.0,13.0,14.4,14.0,11.6,12.1,11.6,9.3,7.9,11.6,11.3,14.1,11.1,9.9,9.3,9.5,11.1,8.4,6.1,6.2,6.4,7.1,7.2,7.0,8.4,8.1,7.4,6.7,5.5,5.1,2.5,2.9,4.0,2.8,4.1,4.7,7.9,0.8,3.2,3.1,2.4,2.5,2.6,2.9,4.8,7.0,7.7,8.4,9.0,10.2,12.0,13.3,13.2,12.7,11.5,9.2,6.4,4.3,4.3,5.4,6.1,6.1,6.5,7.2,7.2,6.6,6.6,6.4,6.4,6.9,8.4,10.2,11.2,11.0,10.0,9.2,8.6,7.7,7.1,7.1,8.4,9.4,3.4,4.7,5.4,5.8,5.9,5.6,5.4,5.0,4.7,4.6,4.0,4.0,4.0,4.3,5.5,6.0,6.9,7.1,7.2,7.4,7.1,6.4,5.2,4.4,4.3,5.1,5.7,5.2,4.2,3.4,2.9,2.6,1.8,0.5,2.1,3.4,3.3,2.7,2.9,2.6,2.4,2.6,3.7,5.0,5.6,5.1,4.0,3.4,3.7,4.3,4.8,4.7,4.7]}}

# # Creation of general information about weather
# from datetime import datetime
# import requests as req
# import pandas as pd
# from uuid import uuid4

# response_weather_api = req.get('https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m').json()

# info_weather = {}

# def build_to_dataframe(for_dict, result_dict, extra_before_key=''):
#   for key, value in for_dict.items():
#       if isinstance(value, dict):
#         build_to_dataframe(value, result_dict, '' if key == 'hourly' else 'Unit_')
#         continue

#       key_formatted = extra_before_key + convert_to_dataframe_key(key)
#       result_dict[key_formatted] = value


# build_to_dataframe(response_weather_api, info_weather)

# info_weather_df = pd.DataFrame(info_weather)
# info_weather_df['Creation_Date'] = pd.to_datetime(datetime.now())
# display(info_weather_df)

# # Clean data
# # La api aparenta devolver respuestas limpias, sin valores nulos o atípicos
# print("Valores nulos\n")
# print(info_weather_df.isnull().sum())
# print(f"\n\nCantidad de duplicados: {info_weather_df.duplicated().sum()}")

# # Pero por las dudas, en caso de que en algún momento falle, lo limpiamos
# info_weather_df.drop_duplicates(subset=['Time'], keep="first", inplace=True)
# info_weather_df.dropna()

# # Inserting data on Redshift
# from psycopg2.extras import execute_values

# with connection.cursor() as cursor:
#   execute_values(
#       cursor,
#       f'''
#       INSERT INTO infoweather ({", ".join(info_weather_df.columns.values)})
#       VALUES %s
#       ''',
#       [tuple(row) for row in info_weather_df.values],
#       page_size=len(info_weather_df)
#   )
#   connection.commit()


from datetime import datetime
import requests as req
import pandas as pd
from uuid import uuid4
import psycopg2
from psycopg2.extras import execute_values
import os
from airflow.models import Variable

# host = "data-engineer-cluster.cyhh5bfevlmn.us-east-1.redshift.amazonaws.com"
# dbname = "data-engineer-database"
# user = "hernandez17_guillermo_coderhouse"
host = Variable.get('HOST_DB')
dbname = Variable.get('NAME_DB')
user = Variable.get('USER_DB')
port = "5439"
password = Variable.get('PASSWORD_DB')


def get_info_weather():

    def convert_to_dataframe_key(key):
        return key.replace('_', ' ').title().replace(' ', '_')

    def build_to_dataframe(for_dict, result_dict, extra_before_key=''):
        for key, value in for_dict.items():
            if isinstance(value, dict):
                build_to_dataframe(value, result_dict,
                                   '' if key == 'hourly' else 'Unit_')
                continue

            key_formatted = extra_before_key + convert_to_dataframe_key(key)
            result_dict[key_formatted] = value

    response_weather_api = req.get(
        'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m').json()

    info_weather = {}

    build_to_dataframe(response_weather_api, info_weather)

    info_weather_df = pd.DataFrame(info_weather)
    info_weather_df['Creation_Date'] = pd.to_datetime(datetime.now())

    return info_weather_df


def clean_data():
    info_weather_df = get_info_weather()

    info_weather_df.drop_duplicates(
        subset=['Time'], keep="first", inplace=True)
    info_weather_df.dropna()

    return info_weather_df


def connect_to_redshift():
    # with open("./config.txt", 'r') as f:
    #     password = str(f.read()).strip()

    try:
        connection = psycopg2.connect(
            host=host,
            dbname=dbname,
            user=user,
            password=password,
            port=port
        )
        print("Connection successfully!")

    except Exception as e:
        print('Credentials', host, dbname, user, password, port)
        print("Error connecting")
        print(e)

    # Creation 'infoweather' table, this contains general information about weather for last 7 days
    with connection.cursor() as cursor:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS hernandez17_guillermo_coderhouse.infoweather
            (
            time VARCHAR(19) primary key,
            latitude DECIMAL not null,
            longitude DECIMAL not null,
            generationtime_ms DECIMAL(30, 20) not null,
            utc_offset_seconds DECIMAL not null,
            timezone VARCHAR(50) not null,
            timezone_abbreviation VARCHAR(5) not null,
            elevation DECIMAL not null,
            unit_time VARCHAR(20) not null,
            unit_temperature_2m VARCHAR(10) not null,
            unit_relative_humidity_2m VARCHAR(10) not null,
            unit_wind_speed_10m VARCHAR(10) not null,
            temperature_2m DECIMAL not null,
            relative_humidity_2m DECIMAL not null,
            wind_speed_10m DECIMAL not null,
            creation_date TIMESTAMP not null
            );
        """)
        connection.commit()


def insert_data_to_redshift():
    connection = psycopg2.connect(
        host=host,
        dbname=dbname,
        user=user,
        password=password,
        port=port
    )

    info_weather_df = clean_data()

    with connection.cursor() as cursor:
        try:
            execute_values(
                cursor,
                f'''
                INSERT INTO infoweather ({", ".join(info_weather_df.columns.values)})
                VALUES %s
                ''',
                [tuple(row) for row in info_weather_df.values],
                page_size=len(info_weather_df)
            )
            connection.commit()
            connection.close()

        except Exception as e:
            print("No es posible insertar datos")
            print(e)
